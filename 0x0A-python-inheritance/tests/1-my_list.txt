#1-my_list.txt
This doctests checks a script that creates a MyList class.
Import the module
>>> MyList = __import__('1-my_list').MyList

Mylist class can be instatiated with no arguments, which will return
an empty list
>>> MyList = __import__('1-my_list').MyList
>>> my_list = MyList()
>>> type(my_list)
<class '1-my_list.MyList'>

>>> print(my_list)
[]

A single argument, which must be an iterable object
>>> my_list = MyList([1, 2, 3])
>>> print(my_list)
[1, 2, 3]

>>> my_list = MyList(None)
Traceback (most recent call last):
TypeError: 'NoneType' object is not iterable

Incase there was more than one instantiation arguments a TypeError is raised
>>> my_list = MyList([1,2], [3, 4])
Traceback (most recent call last):
TypeError: list() takes at most 1 argument (2 given)

Checks that MyList is appended correctly
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(2)
>>> my_list.append(3)
>>> print(my_list)
[1, 2, 3]

my_list is replaced with indexing
>>> my_list[0] = 5
>>> print(my_list)
[5, 2, 3]

Checks removed with the remove method
>>> my_list.remove(5)
>>> print(my_list)
[2, 3]

Checks if my_list is print_sorted correctly
>>> my_list = MyList()
>>> print(my_list.print_sorted)
<bound method MyList.print_sorted of []>

If print_sorted takes no arguments - a TypeError will be raised if argument
is provided
>>> my_list.print_sorted(1)
Traceback (most recent call last):
TypeError: print_sorted() takes 1 positional argument but 2 were given

Checks that method prints the list in ascending sorted order
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 2, 3, 5]

>>> my_list.print_sorted()
[1, 2, 3, 4, 5]

The order of original list is not altered after a call to the method
>>> print(my_list)
[1, 4, 2, 3, 5]

Checks that lists of strings are sorted lexorapically
>>> my_list = MyList()
>>> my_list.append("Bob")
>>> my_list.append("Home")
>>> my_list.append("School")
>>> my_list.append("Mombasa")
>>> my_list.append("Kenya")
>>> print(my_list)
['Bob', 'Home', 'School', 'Mombasa', 'Kenya']

>>> my_list.print_sorted()
['Bob', 'Home', 'Kenya', 'Mombasa', 'School']

Original list is unaltered
>>> print(my_list)
['Bob', 'Home', 'School', 'Mombasa', 'Kenya']

Nothing to sort with empty lists
>>> my_list = MyList()
>>> my_list.print_sorted()
[]

If print_sorted is called on list of different types- TypeError is raised
>>> my_list = MyList([1, "Bob", 5, "School"])
>>> my_list.print_sorted()
Traceback (most recent call last):
TypeError: unorderable types: str() < int()
